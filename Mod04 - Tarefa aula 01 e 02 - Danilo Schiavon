{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarefa 01\n",
    "\n",
    "- Leia os enunciados com atenção\n",
    "- Saiba que pode haver mais de uma resposta correta\n",
    "- Insira novas células de código sempre que achar necessário\n",
    "- Em caso de dúvidas, procure os tutores\n",
    "- Divirta-se :)\n",
    "\n",
    "#### 1)  crie uma série do pandas a partir de uma lista com os dados abaixo:\n",
    "\n",
    "Em um estudo sobre alteração na tempreatura global, A NASA disponibiliza dados de diferenças de de temperatura média da superfície terrestre relativos às médias de temperatura entre 1951 e 1980. Os dados originais podem ser vistos no site da NASA/GISS, e estão dispostos a cada década na tabela abaixo.\n",
    "\n",
    "|ano|anomalia termica|\n",
    "|:-:|:----:|\n",
    "| 1900 | -0.08 |\n",
    "| 1920 | -0.27 |\n",
    "| 1940 | 0.12 |\n",
    "| 1960 | -0.03 |\n",
    "| 1980 | 0.26 |\n",
    "| 2000 | 0.40 |\n",
    "| 2020 | 1.02 |\n",
    "\n",
    "Crie uma séries do Pandas a partir de uma lista com esses dados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0   -0.08\n",
      "1   -0.27\n",
      "2    0.12\n",
      "3   -0.03\n",
      "4    0.26\n",
      "5    0.40\n",
      "6    1.02\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Seu código aqui\n",
    "dados = [-0.08, -0.27, 0.12, -0.03, 0.26, 0.40, 1.02]\n",
    "\n",
    "#Criando a série do pandas a partir da base de dados:\n",
    "serie = pd.Series(dados)\n",
    "print(serie)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2) Coloque os anos nos índices conforme a tabela."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1900   -0.08\n",
      "1920   -0.27\n",
      "1940    0.12\n",
      "1960   -0.03\n",
      "1980    0.26\n",
      "2000    0.40\n",
      "2020    1.02\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# seu código aqui\n",
    "anos = [1900, 1920, 1940, 1960, 1980, 2000, 2020]\n",
    "\n",
    "#Criando a série do pandas com ANOS como índice\n",
    "serie = pd.Series(dados, index=anos)\n",
    "print(serie)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3) A partir do dicionário abaixo, crie uma séries do Pandas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1900   -0.08\n",
      "1920   -0.27\n",
      "1940    0.12\n",
      "1960   -0.03\n",
      "1980    0.26\n",
      "2000    0.40\n",
      "2020    1.02\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "dic_temperaturas = {1900: -.08, 1920: -.27, 1940: .12, 1960: -.03, 1980: .26, 2000: .40, 2020: 1.02}\n",
    "\n",
    "# seu código aqui\n",
    "serie_dict = pd.Series(dic_temperaturas)\n",
    "print(serie_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4) Transforme o ndarray abaixo em um dataframe. \n",
    "O numpy é capaz de gerar arrays n-dimensionais com números pseudo-aleatórios de acordo com uma variedade de distribuições, como no exemplo abaixo. Transforme esse nd-array em um DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             0           1           2\n",
      "0    89.599627  101.519571  146.003333\n",
      "1    88.290103   99.286690  104.922558\n",
      "2   101.495763   98.973544   86.972683\n",
      "3   113.484845  125.916988   96.137196\n",
      "4    81.630139   96.525598   89.964941\n",
      "5    94.926964   99.799767  101.394652\n",
      "6    91.213426   90.077692  110.452011\n",
      "7   114.468300  117.729028  109.100585\n",
      "8    96.363441  105.785144   90.329457\n",
      "9    84.201643   98.614691   97.097339\n",
      "10   93.758616  101.256316  116.777640\n",
      "11   97.166712  102.822593   86.325897\n",
      "12   97.039380  103.285592  100.306747\n",
      "13   91.468534   87.823853  100.110993\n",
      "14  100.873503   82.542172   73.797451\n",
      "15   94.864028   90.868223   90.120061\n",
      "16   80.338909  102.643586   85.156863\n",
      "17   98.587848   79.110765   96.797564\n",
      "18   99.403570  105.308773   88.619565\n",
      "19   95.889531   85.807312  107.010565\n"
     ]
    }
   ],
   "source": [
    "arr = np.random.normal(100, 10, (20,3))\n",
    "\n",
    "# seu código aqui\n",
    "#Transformando o 'ndarray' em dataframe\n",
    "df = pd.DataFrame(arr)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5) Nomeie os índices das linhas com inteiros de 1 a 20, e as colunas com os nomes \"x1\", \"x2\", e \"x3\" respectivamente."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            x1          x2          x3\n",
      "1    89.599627  101.519571  146.003333\n",
      "2    88.290103   99.286690  104.922558\n",
      "3   101.495763   98.973544   86.972683\n",
      "4   113.484845  125.916988   96.137196\n",
      "5    81.630139   96.525598   89.964941\n",
      "6    94.926964   99.799767  101.394652\n",
      "7    91.213426   90.077692  110.452011\n",
      "8   114.468300  117.729028  109.100585\n",
      "9    96.363441  105.785144   90.329457\n",
      "10   84.201643   98.614691   97.097339\n",
      "11   93.758616  101.256316  116.777640\n",
      "12   97.166712  102.822593   86.325897\n",
      "13   97.039380  103.285592  100.306747\n",
      "14   91.468534   87.823853  100.110993\n",
      "15  100.873503   82.542172   73.797451\n",
      "16   94.864028   90.868223   90.120061\n",
      "17   80.338909  102.643586   85.156863\n",
      "18   98.587848   79.110765   96.797564\n",
      "19   99.403570  105.308773   88.619565\n",
      "20   95.889531   85.807312  107.010565\n"
     ]
    }
   ],
   "source": [
    "#seu código aqui\n",
    "#Nomeando as colunas e os indices do dataframe\n",
    "df.index = range(1, 21)\n",
    "df.columns = ['x1', 'x2', 'x3']\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6) No DataFrame do exercício 5, crie uma nova coluna como sendo a média das três colunas, e dê a ela o nome de \"media\" (não recomendo colocar acentos em nomes de variáveis)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            x1          x2          x3       media\n",
      "1    89.599627  101.519571  146.003333  112.374177\n",
      "2    88.290103   99.286690  104.922558   97.499784\n",
      "3   101.495763   98.973544   86.972683   95.813997\n",
      "4   113.484845  125.916988   96.137196  111.846343\n",
      "5    81.630139   96.525598   89.964941   89.373560\n",
      "6    94.926964   99.799767  101.394652   98.707128\n",
      "7    91.213426   90.077692  110.452011   97.247709\n",
      "8   114.468300  117.729028  109.100585  113.765971\n",
      "9    96.363441  105.785144   90.329457   97.492681\n",
      "10   84.201643   98.614691   97.097339   93.304558\n",
      "11   93.758616  101.256316  116.777640  103.930857\n",
      "12   97.166712  102.822593   86.325897   95.438400\n",
      "13   97.039380  103.285592  100.306747  100.210573\n",
      "14   91.468534   87.823853  100.110993   93.134460\n",
      "15  100.873503   82.542172   73.797451   85.737708\n",
      "16   94.864028   90.868223   90.120061   91.950770\n",
      "17   80.338909  102.643586   85.156863   89.379786\n",
      "18   98.587848   79.110765   96.797564   91.498726\n",
      "19   99.403570  105.308773   88.619565   97.777303\n",
      "20   95.889531   85.807312  107.010565   96.235803\n"
     ]
    }
   ],
   "source": [
    "# seu código aqui\n",
    "#Criando a nova coluna solicitada\n",
    "df['media'] = df[['x1', 'x2', 'x3']].mean(axis=1)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "#### 7) No DataFrame do exercício 6, crie uma nova coluna chamada \"log_med\", contendo o logaritmo natural da média calculada no exercício 6 <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            x1          x2          x3       media   log_med\n",
      "1    89.599627  101.519571  146.003333  112.374177  4.721834\n",
      "2    88.290103   99.286690  104.922558   97.499784  4.579850\n",
      "3   101.495763   98.973544   86.972683   95.813997  4.562409\n",
      "4   113.484845  125.916988   96.137196  111.846343  4.717126\n",
      "5    81.630139   96.525598   89.964941   89.373560  4.492825\n",
      "6    94.926964   99.799767  101.394652   98.707128  4.592157\n",
      "7    91.213426   90.077692  110.452011   97.247709  4.577261\n",
      "8   114.468300  117.729028  109.100585  113.765971  4.734143\n",
      "9    96.363441  105.785144   90.329457   97.492681  4.579777\n",
      "10   84.201643   98.614691   97.097339   93.304558  4.535869\n",
      "11   93.758616  101.256316  116.777640  103.930857  4.643726\n",
      "12   97.166712  102.822593   86.325897   95.438400  4.558481\n",
      "13   97.039380  103.285592  100.306747  100.210573  4.607274\n",
      "14   91.468534   87.823853  100.110993   93.134460  4.534044\n",
      "15  100.873503   82.542172   73.797451   85.737708  4.451293\n",
      "16   94.864028   90.868223   90.120061   91.950770  4.521253\n",
      "17   80.338909  102.643586   85.156863   89.379786  4.492895\n",
      "18   98.587848   79.110765   96.797564   91.498726  4.516325\n",
      "19   99.403570  105.308773   88.619565   97.777303  4.582692\n",
      "20   95.889531   85.807312  107.010565   96.235803  4.566801\n"
     ]
    }
   ],
   "source": [
    "# seu código aqui\n",
    "df['log_med'] = np.log(df['media'])\n",
    "print(df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
